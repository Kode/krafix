name: Linux (ARM)

on:
  push:
    branches:
    - main
    - fix-linux-arm-action
  pull_request:
    branches:
    - main

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_job:
    runs-on: ubuntu-latest
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}

    # Run steps for both armv6 and aarch64
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: buster
            repo: "KincTools_linux_arm64"
          - arch: armv7
            distro: buster
            repo: "KincTools_linux_arm"

    steps:
      - uses: actions/checkout@v2
      - name: Get Submodules
        run: git submodule update --init --recursive
      - uses: uraimo/run-on-arch-action@v2
        name: Build artifact
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # The shell to run commands with in the container
          shell: /bin/bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
              apt-get update -y -q
              apt-get upgrade -y -q
              apt-get install -y -q libasound2-dev libxinerama-dev libgl1-mesa-dev libxi-dev git build-essential

          # Produce a binary artifact and place it in the mounted volume
          run: |
            echo " * Get KincTools"
            git clone --recursive --depth 1 https://github.com/Kode/${{ matrix.repo }}.git
            echo " * Compile"
            ./${{ matrix.repo }}/kmake --compile
            echo " * Copying artifact"
            cp build/Release/krafix "/artifacts/krafix"

      - name: Get binary-repository
        run: git clone https://github.com/Kode/${{ matrix.repo }}.git KincTools
      - name: Copy binary
        run: cp "${PWD}/artifacts/krafix" KincTools/krafix
      - name: Set name
        run: git config --global user.name "Robbot"
      - name: Set email
        run: git config --global user.email "robbot2019@robdangero.us"
      - name: Commit binary
        id: commit
        continue-on-error: true
        run: git -C KincTools commit -a -m "Update krafix binary to $GITHUB_SHA."
      - name: Tag binary
        if: steps.commit.outcome == 'success'
        run: git -C KincTools tag krafix_$GITHUB_SHA
      - name: Push binary
        id: push1
        if: steps.commit.outcome == 'success'
        continue-on-error: true
        run: git -C KincTools push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/${{ matrix.repo }}.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
      - name: Pull
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        run: git -C KincTools pull --no-rebase
      - name: Push binary again
        if: steps.commit.outcome == 'success' && steps.push1.outcome != 'success'
        continue-on-error: true
        run: git -C KincTools push https://Kode-Robbot:$ROBBOT_PASS@github.com/Kode/${{ matrix.repo }}.git main --tags
        env:
          ROBBOT_PASS: ${{ secrets.ROBBOT_PASS }}
